// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  name            String
  password        String
  avatar          String?           @default("")
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime?         @default(now())
  roles           Json?
  ChatRooms       ChatRoom[] //一个用户具有多个私聊聊天室
  CloudFiles      CloudFile[]
  RePorts         Report[]
  Approvals       Approval[]
  Friends         Friend[]
  SharedCloudFile SharedCloudFile[]
}

model Friend {
  User       User   @relation(fields: [userId], references: [id])
  userId     String @id
  friendList String @db.Text //好友列表使用，隔开
}

model Group {
  id          String    @id @default(uuid())
  leaderId    String
  name        String    @unique
  avatar      String?   @default("")
  description String    @db.Text
  createdAt   DateTime  @default(now())
  ChatRoom    ChatRoom? //限制一个团队对应一个聊天室，用于群聊
}

model ChatRoom {
  id       String    @id @default(uuid())
  userIds  String    @db.Text //用户id,逗号隔开
  name     String    @default("")
  type     String    @default("private")
  Group    Group?    @relation(fields: [groupId], references: [id])
  groupId  String?   @unique
  Messages Message[]
  userId   String?
  User     User?     @relation(fields: [userId], references: [id])
}

model Message {
  id           String    @id @default(uuid())
  senderId     String
  receiverId   String
  thirdPartyId String?
  groupName    String?
  groupAvatar  String?
  text         String?   @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  type         String    @default("chat") //消息类型，有聊天，好友邀请，群邀请,申请好友，申请加群等
  state        String    @default("pending") //pending|agree|reject
  fileType     String    @default("text")
  isread       Int       @default(0) //0表示未读，1表示已读
  ChatRoom     ChatRoom? @relation(fields: [chatRoomId], references: [id])
  chatRoomId   String?
}

model CloudFile {
  id               String             @id @default(uuid())
  parentId         String             @default("0")
  title            String
  description      String             @db.Text
  path             String             @default("")
  type             String             @default("folder") //文件类型:folder、document、image
  text             String?            @db.LongText
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  collaborators    String?            @db.Text //协作者id，逗号隔开
  User             User?              @relation(fields: [userId], references: [id])
  userId          String?
}

model SharedCloudFile {
  id               String             @id @default(uuid())
  parentId         String             @default("0")
  isshared         Int                @default(0) //0表示已共享，1表示未共享
  title            String
  description      String             @db.Text
  path             String             @default("")
  type             String             @default("folder") //文件类型:folder、document、image
  text             String?            @db.LongText
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  collaborators    String?            @db.Text //协作者id，逗号隔开
  User             User?              @relation(fields: [ownerId], references: [id])
  ownerId          String?
  OnlineEditPerson OnlineEditPerson[]
}

//在线编辑的用户
model OnlineEditPerson {
  id                String           @id
  SharedCloudFile   SharedCloudFile? @relation(fields: [sharedCloudFileId], references: [id])
  sharedCloudFileId String?
}

model Approval {
  id        String   @id @default(uuid())
  type      String //0加班，1外出，2请假
  state     String   @default("pending") //pending|agree|reject
  startTime DateTime @default(now())
  endTime   DateTime @default(now())
  reason    String   @db.Text
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Report {
  id         String   @id @default(uuid())
  title      String
  type       String   @default("0") //0表示日报、1表示周报、2表示月报
  curReport  String   @db.Text
  prevPeport String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Calendar {
  id          String   @id @default(uuid())
  title       String
  startTime   DateTime @default(now())
  endTime     DateTime @default(now())
  createdAt   DateTime @default(now())
  description String?  @db.Text
}
