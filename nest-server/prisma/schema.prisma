// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  name           String
  password       String
  avatar         String?         @default("")
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @default(now())
  roles          Json?
  ChatRoom       ChatRoom?
  UserGroups     UserGroup[]
  CloudDocuments CloudDocument[]
  CloudFiles     CloudFile[]
  RePorts        Report[]
  Approvals      Approval[]
  friends        UserFriend[]    @relation("UserToFriends")
  friendships    UserFriend[]    @relation("FriendToUsers")
}

model UserFriend {
  id        String   @id @default(uuid())
  state     String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation("UserToFriends", fields: [userId], references: [id])
  friend    User     @relation("FriendToUsers", fields: [friendId], references: [id])
  userId    String
  friendId  String

  @@unique([userId, friendId])
}

model UserGroup {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  state     String   @default("pending") //pending|agree|reject
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@id([userId, groupId])
}

model Group {
  id          String      @id @default(uuid())
  leaderId    String
  name        String      @unique
  avatar      String?     @default("")
  description String      @default("")
  createdAt   DateTime    @default(now())
  UserGroups  UserGroup[]
  ChatRoom    ChatRoom? //限制一个团队只有一个聊天室
}

model ChatRoom {
  id          String       @id @default(uuid())
  userIds     String       @db.Text //用户id,逗号隔开
  name        String       @default("")
  ChatRecords ChatRecord[]
  type        String       @default("public")
  Group       Group?       @relation(fields: [groupId], references: [id])
  groupId     String?      @unique
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?      @unique
}

model ChatRecord {
  id         String    @id @default(uuid())
  senderId   String
  receiverId String
  ChatRoom   ChatRoom? @relation(fields: [ChatRoomId], references: [id])
  ChatRoomId String?
  Messages   Message[]
}

model Message {
  id           String      @id @default(uuid())
  text         String?     @db.Text
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  state        String      @default("pending") //pending|agree|reject
  fileType     String      @default("text")
  image        Image?
  imageUrl     String      @unique
  isread       Int         @default(0) //0表示未读，1表示已读
  ChatRecord   ChatRecord? @relation(fields: [chatRecordId], references: [id])
  chatRecordId String?
}

model Image {
  id      String  @id @default(uuid())
  Message Message @relation(fields: [path], references: [imageUrl])
  path    String  @unique
}

//CloudFile的id不给默认值，这是因为CloudFile的id必须和用户id保持一致
model CloudFile {
  id             String          @id
  title          String
  parentId       String          @default("")
  User           User?           @relation(fields: [userId], references: [id])
  userId         String?
  CloudDocuments CloudDocument[]
}

model CloudDocument {
  id                String             @id @default(uuid())
  title             String
  text              String             @db.Text
  version           String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  ownerId           String
  collaborators     String //协作者id，逗号隔开
  User              User?              @relation(fields: [userId], references: [id])
  userId            String?
  CloudFile         CloudFile?         @relation(fields: [CloudFileId], references: [id])
  CloudFileId       String?
  OnlineEditPersons OnlineEditPerson[]
}

//在线编辑的用户
model OnlineEditPerson {
  id            String         @id
  CloudDocument CloudDocument? @relation(fields: [id], references: [id])
  onlineIds     String         @db.Text
}

model Approval {
  id        String   @id @default(uuid())
  type      String //0加班，1外出，2请假
  state     String   @default("pending") //pending|agree|reject
  startTime DateTime @default(now())
  endTime   DateTime @default(now())
  reason    String   @db.Text
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Report {
  id         String   @id @default(uuid())
  title      String
  type       String   @default("0") //0表示日报、1表示周报、2表示月报
  curReport  String   @db.Text
  prevPeport String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Calendar {
  id        String   @id @default(uuid())
  title     String
  startTime DateTime @default(now())
  endTime   DateTime @default(now())
  createdAt DateTime @default(now())
  desc      String   @db.Text
}
