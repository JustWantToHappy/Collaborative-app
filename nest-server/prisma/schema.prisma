// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String
  password      String
  avatar        String?         @default("")
  createAt      DateTime?       @default(now())
  updateAt      DateTime?
  roles         Json?
  UserGroup     UserGroup[]
  ChatRecord    ChatRecord[]
  CloudDocument CloudDocument[]
  CloudFile     CloudFile[]
  RePort        Report[]
  Approval      Approval[]
  friends       UserFriend[]    @relation("UserToFriends")
  friendships   UserFriend[]    @relation("FriendToUsers")
}

model UserFriend {
  id        String   @id @default(uuid())
  state     String   @default("pending")
  createdAt DateTime @default(now()) @map("createAt")
  updatedAt DateTime @updatedAt
  user      User     @relation("UserToFriends", fields: [userId], references: [id])
  friend    User     @relation("FriendToUsers", fields: [friendId], references: [id])
  userId    String
  friendId  String

  @@unique([userId, friendId])
}

model UserGroup {
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  String
  state    String   @default("pending") //pending|agree|reject
  createAt DateTime @default(now())
  updateAt DateTime

  @@id([userId, groupId])
}

model Group {
  id          String      @id @default(uuid())
  leaderId    String
  name        String      @unique
  avatar      String?     @default("")
  description String      @default("")
  createAt    DateTime    @default(now())
  UserGroup   UserGroup[]
}

model ChatRoom {
  id         String       @id @default(uuid())
  ChatRecord ChatRecord[]
}

model ChatRecord {
  id         String    @id @default(uuid())
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?
  ChatRoom   ChatRoom? @relation(fields: [ChatRoomId], references: [id])
  ChatRoomId String?
}

model Message {
  id         String   @id @default(uuid())
  text       String?  @db.Text
  createAt   DateTime @default(now())
  updateAt   DateTime
  state      String   @default("pending") //pending|agree|reject
  senderId   Int
  receiverId Int
  fileType   Int      @default(0) //默认值0表示为文本，1表示为图片
  image      Image?
  imageUrl   String   @unique
}

model Image {
  id      String  @id @default(uuid())
  Message Message @relation(fields: [path], references: [imageUrl])
  path    String  @unique
}

//CloudFile的id不给默认值，这是因为CloudFile的id必须和用户id保持一致
model CloudFile {
  id            String          @id
  title         String
  parentId      String          @default("")
  User          User?           @relation(fields: [userId], references: [id])
  userId        String?
  CloudDocument CloudDocument[]
}

model CloudDocument {
  id               String             @id @default(uuid())
  title            String
  text             String             @db.Text
  version          String
  createAt         DateTime           @default(now())
  updateAt         DateTime
  ownerId          String
  collaborators    String //协作者id，逗号隔开
  User             User?              @relation(fields: [userId], references: [id])
  userId           String?
  CloudFile        CloudFile?         @relation(fields: [CloudFileId], references: [id])
  CloudFileId      String?
  OnlineEditPerson OnlineEditPerson[]
}

//在线编辑的用户
model OnlineEditPerson {
  id            String         @id
  CloudDocument CloudDocument? @relation(fields: [id], references: [id])
  onlineIds     String         @db.Text
}

model Approval {
  id        String   @id @default(uuid())
  type      String //0加班，1外出，2请假
  state     String   @default("pending") //pending|agree|reject
  startTime DateTime @default(now())
  endTime   DateTime @default(now())
  reason    String   @db.Text
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Report {
  id         String   @id @default(uuid())
  title      String
  type       String   @default("0") //0表示日报、1表示周报、2表示月报
  curReport  String   @db.Text
  prevPeport String   @db.Text
  createAt   DateTime @default(now())
  updateAt   DateTime
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Calendar {
  id        String   @id @default(uuid())
  title     String
  startTime DateTime @default(now())
  endTime   DateTime @default(now())
  createAt  DateTime @default(now())
  desc      String   @db.Text
}
